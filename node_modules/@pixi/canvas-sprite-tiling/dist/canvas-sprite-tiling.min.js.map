{"version":3,"file":"canvas-sprite-tiling.min.js","sources":["../src/TilingSprite.js"],"sourcesContent":["import { TilingSprite } from '@pixi/sprite-tiling';\nimport { canvasUtils } from '@pixi/canvas-renderer';\nimport { CanvasRenderTarget } from '@pixi/utils';\n\n/**\n * Renders the object using the Canvas renderer\n *\n * @protected\n * @function _renderCanvas\n * @memberof PIXI.TilingSprite#\n * @param {PIXI.CanvasRenderer} renderer - a reference to the canvas renderer\n */\nTilingSprite.prototype._renderCanvas = function _renderCanvas(renderer)\n{\n    const texture = this._texture;\n\n    if (!texture.baseTexture.valid)\n    {\n        return;\n    }\n\n    const context = renderer.context;\n    const transform = this.worldTransform;\n    const resolution = renderer.resolution;\n    const baseTexture = texture.baseTexture;\n    const source = baseTexture.getDrawableSource();\n    const baseTextureResolution = baseTexture.resolution;\n    const modX = ((this.tilePosition.x / this.tileScale.x) % texture._frame.width) * baseTextureResolution;\n    const modY = ((this.tilePosition.y / this.tileScale.y) % texture._frame.height) * baseTextureResolution;\n\n    // create a nice shiny pattern!\n    if (this._textureID !== this._texture._updateID || this._cachedTint !== this.tint)\n    {\n        this._textureID = this._texture._updateID;\n        // cut an object from a spritesheet..\n        const tempCanvas = new CanvasRenderTarget(texture._frame.width,\n            texture._frame.height,\n            baseTextureResolution);\n\n        // Tint the tiling sprite\n        if (this.tint !== 0xFFFFFF)\n        {\n            this._tintedCanvas = canvasUtils.getTintedCanvas(this, this.tint);\n            tempCanvas.context.drawImage(this._tintedCanvas, 0, 0);\n        }\n        else\n        {\n            tempCanvas.context.drawImage(source,\n                -texture._frame.x * baseTextureResolution, -texture._frame.y * baseTextureResolution);\n        }\n        this._cachedTint = this.tint;\n        this._canvasPattern = tempCanvas.context.createPattern(tempCanvas.canvas, 'repeat');\n    }\n\n    // set context state..\n    context.globalAlpha = this.worldAlpha;\n    context.setTransform(transform.a * resolution,\n        transform.b * resolution,\n        transform.c * resolution,\n        transform.d * resolution,\n        transform.tx * resolution,\n        transform.ty * resolution);\n\n    renderer.setBlendMode(this.blendMode);\n\n    // fill the pattern!\n    context.fillStyle = this._canvasPattern;\n\n    // TODO - this should be rolled into the setTransform above..\n    context.scale(this.tileScale.x / baseTextureResolution, this.tileScale.y / baseTextureResolution);\n\n    const anchorX = this.anchor.x * -this._width;\n    const anchorY = this.anchor.y * -this._height;\n\n    if (this.uvRespectAnchor)\n    {\n        context.translate(modX, modY);\n\n        context.fillRect(-modX + anchorX, -modY + anchorY,\n            this._width / this.tileScale.x * baseTextureResolution,\n            this._height / this.tileScale.y * baseTextureResolution);\n    }\n    else\n    {\n        context.translate(modX + anchorX, modY + anchorY);\n\n        context.fillRect(-modX, -modY,\n            this._width / this.tileScale.x * baseTextureResolution,\n            this._height / this.tileScale.y * baseTextureResolution);\n    }\n};\n"],"names":["prototype","_renderCanvas","renderer","const","texture","this","_texture","baseTexture","valid","context","transform","worldTransform","resolution","source","getDrawableSource","baseTextureResolution","modX","tilePosition","x","tileScale","_frame","width","modY","y","height","_textureID","_updateID","_cachedTint","tint","tempCanvas","CanvasRenderTarget","_tintedCanvas","canvasUtils","getTintedCanvas","drawImage","_canvasPattern","createPattern","canvas","globalAlpha","worldAlpha","setTransform","a","b","c","d","tx","ty","setBlendMode","blendMode","fillStyle","scale","anchorX","anchor","_width","anchorY","_height","uvRespectAnchor","translate","fillRect"],"mappings":";;;;;;;oEAYaA,UAAUC,cAAgB,SAAuBC,GAE1DC,IAAMC,EAAUC,KAAKC,SAErB,GAAKF,EAAQG,YAAYC,MAAzB,CAKAL,IAAMM,EAAUP,EAASO,QACnBC,EAAYL,KAAKM,eACjBC,EAAaV,EAASU,WACtBL,EAAcH,EAAQG,YACtBM,EAASN,EAAYO,oBACrBC,EAAwBR,EAAYK,WACpCI,EAASX,KAAKY,aAAaC,EAAIb,KAAKc,UAAUD,EAAKd,EAAQgB,OAAOC,MAASN,EAC3EO,EAASjB,KAAKY,aAAaM,EAAIlB,KAAKc,UAAUI,EAAKnB,EAAQgB,OAAOI,OAAUT,EAGlF,GAAIV,KAAKoB,aAAepB,KAAKC,SAASoB,WAAarB,KAAKsB,cAAgBtB,KAAKuB,KAC7E,CACIvB,KAAKoB,WAAapB,KAAKC,SAASoB,UAEhCvB,IAAM0B,EAAa,IAAIC,qBAAmB1B,EAAQgB,OAAOC,MACrDjB,EAAQgB,OAAOI,OACfT,GAGc,WAAdV,KAAKuB,MAELvB,KAAK0B,cAAgBC,cAAYC,gBAAgB5B,KAAMA,KAAKuB,MAC5DC,EAAWpB,QAAQyB,UAAU7B,KAAK0B,cAAe,EAAG,IAIpDF,EAAWpB,QAAQyB,UAAUrB,GACxBT,EAAQgB,OAAOF,EAAIH,GAAwBX,EAAQgB,OAAOG,EAAIR,GAEvEV,KAAKsB,YAActB,KAAKuB,KACxBvB,KAAK8B,eAAiBN,EAAWpB,QAAQ2B,cAAcP,EAAWQ,OAAQ,UAI9E5B,EAAQ6B,YAAcjC,KAAKkC,WAC3B9B,EAAQ+B,aAAa9B,EAAU+B,EAAI7B,EAC/BF,EAAUgC,EAAI9B,EACdF,EAAUiC,EAAI/B,EACdF,EAAUkC,EAAIhC,EACdF,EAAUmC,GAAKjC,EACfF,EAAUoC,GAAKlC,GAEnBV,EAAS6C,aAAa1C,KAAK2C,WAG3BvC,EAAQwC,UAAY5C,KAAK8B,eAGzB1B,EAAQyC,MAAM7C,KAAKc,UAAUD,EAAIH,EAAuBV,KAAKc,UAAUI,EAAIR,GAE3EZ,IAAMgD,EAAU9C,KAAK+C,OAAOlC,GAAKb,KAAKgD,OAChCC,EAAUjD,KAAK+C,OAAO7B,GAAKlB,KAAKkD,QAElClD,KAAKmD,iBAEL/C,EAAQgD,UAAUzC,EAAMM,GAExBb,EAAQiD,UAAU1C,EAAOmC,GAAU7B,EAAOgC,EACtCjD,KAAKgD,OAAShD,KAAKc,UAAUD,EAAIH,EACjCV,KAAKkD,QAAUlD,KAAKc,UAAUI,EAAIR,KAItCN,EAAQgD,UAAUzC,EAAOmC,EAAS7B,EAAOgC,GAEzC7C,EAAQiD,UAAU1C,GAAOM,EACrBjB,KAAKgD,OAAShD,KAAKc,UAAUD,EAAIH,EACjCV,KAAKkD,QAAUlD,KAAKc,UAAUI,EAAIR"}