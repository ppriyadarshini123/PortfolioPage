{"version":3,"file":"canvas-mesh.min.js","sources":["../src/CanvasMeshRenderer.js","../src/settings.js","../src/MeshMaterial.js","../src/NineSlicePlane.js","../src/Mesh.js","../src/SimpleMesh.js","../src/SimpleRope.js"],"sourcesContent":["import { DRAW_MODES } from '@pixi/constants';\n\n/**\n * Renderer dedicated to meshes.\n *\n * @class\n * @protected\n * @memberof PIXI\n */\nexport class CanvasMeshRenderer\n{\n    /**\n     * @param {PIXI.CanvasRenderer} renderer - The renderer this downport works for\n     */\n    constructor(renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * Renders the Mesh\n     *\n     * @param {PIXI.Mesh} mesh - the Mesh to render\n     */\n    render(mesh)\n    {\n        const renderer = this.renderer;\n        const context = renderer.context;\n\n        const transform = mesh.worldTransform;\n        const res = renderer.resolution;\n\n        if (mesh.roundPixels)\n        {\n            context.setTransform(\n                transform.a * res,\n                transform.b * res,\n                transform.c * res,\n                transform.d * res,\n                (transform.tx * res) | 0,\n                (transform.ty * res) | 0\n            );\n        }\n        else\n        {\n            context.setTransform(\n                transform.a * res,\n                transform.b * res,\n                transform.c * res,\n                transform.d * res,\n                transform.tx * res,\n                transform.ty * res\n            );\n        }\n\n        renderer.context.globalAlpha = mesh.worldAlpha;\n        renderer.setBlendMode(mesh.blendMode);\n\n        if (mesh.drawMode !== DRAW_MODES.TRIANGLES)\n        {\n            this._renderTriangleMesh(mesh);\n        }\n        else\n        {\n            this._renderTriangles(mesh);\n        }\n    }\n\n    /**\n     * Draws the object in Triangle Mesh mode\n     *\n     * @private\n     * @param {PIXI.Mesh} mesh - the Mesh to render\n     */\n    _renderTriangleMesh(mesh)\n    {\n        // draw triangles!!\n        const length = mesh.geometry.buffers[0].data.length;\n\n        for (let i = 0; i < length - 2; i++)\n        {\n            // draw some triangles!\n            const index = i * 2;\n\n            this._renderDrawTriangle(mesh, index, (index + 2), (index + 4));\n        }\n    }\n\n    /**\n     * Draws the object in triangle mode using canvas\n     *\n     * @private\n     * @param {PIXI.Mesh} mesh - the current mesh\n     */\n    _renderTriangles(mesh)\n    {\n        // draw triangles!!\n        const indices = mesh.geometry.getIndex().data;\n        const length = indices.length;\n\n        for (let i = 0; i < length; i += 3)\n        {\n            // draw some triangles!\n            const index0 = indices[i] * 2;\n            const index1 = indices[i + 1] * 2;\n            const index2 = indices[i + 2] * 2;\n\n            this._renderDrawTriangle(mesh, index0, index1, index2);\n        }\n    }\n\n    /**\n     * Draws one of the triangles that from the Mesh\n     *\n     * @private\n     * @param {PIXI.Mesh} mesh - the current mesh\n     * @param {number} index0 - the index of the first vertex\n     * @param {number} index1 - the index of the second vertex\n     * @param {number} index2 - the index of the third vertex\n     */\n    _renderDrawTriangle(mesh, index0, index1, index2)\n    {\n        const context = this.renderer.context;\n        const vertices = mesh.geometry.buffers[0].data;\n        const { uvs, texture } = mesh;\n\n        if (!texture.valid)\n        {\n            return;\n        }\n\n        const base = texture.baseTexture;\n        const textureSource = base.getDrawableSource();\n        const textureWidth = base.width;\n        const textureHeight = base.height;\n\n        const u0 = uvs[index0] * base.width;\n        const u1 = uvs[index1] * base.width;\n        const u2 = uvs[index2] * base.width;\n        const v0 = uvs[index0 + 1] * base.height;\n        const v1 = uvs[index1 + 1] * base.height;\n        const v2 = uvs[index2 + 1] * base.height;\n\n        let x0 = vertices[index0];\n        let x1 = vertices[index1];\n        let x2 = vertices[index2];\n        let y0 = vertices[index0 + 1];\n        let y1 = vertices[index1 + 1];\n        let y2 = vertices[index2 + 1];\n\n        const canvasPadding = mesh.canvasPadding / this.renderer.resolution;\n\n        if (canvasPadding > 0)\n        {\n            const paddingX = canvasPadding / Math.abs(mesh.worldTransform.a);\n            const paddingY = canvasPadding / Math.abs(mesh.worldTransform.d);\n            const centerX = (x0 + x1 + x2) / 3;\n            const centerY = (y0 + y1 + y2) / 3;\n\n            let normX = x0 - centerX;\n            let normY = y0 - centerY;\n\n            let dist = Math.sqrt((normX * normX) + (normY * normY));\n\n            x0 = centerX + ((normX / dist) * (dist + paddingX));\n            y0 = centerY + ((normY / dist) * (dist + paddingY));\n\n            //\n\n            normX = x1 - centerX;\n            normY = y1 - centerY;\n\n            dist = Math.sqrt((normX * normX) + (normY * normY));\n            x1 = centerX + ((normX / dist) * (dist + paddingX));\n            y1 = centerY + ((normY / dist) * (dist + paddingY));\n\n            normX = x2 - centerX;\n            normY = y2 - centerY;\n\n            dist = Math.sqrt((normX * normX) + (normY * normY));\n            x2 = centerX + ((normX / dist) * (dist + paddingX));\n            y2 = centerY + ((normY / dist) * (dist + paddingY));\n        }\n\n        context.save();\n        context.beginPath();\n\n        context.moveTo(x0, y0);\n        context.lineTo(x1, y1);\n        context.lineTo(x2, y2);\n\n        context.closePath();\n\n        context.clip();\n\n        // Compute matrix transform\n        const delta = (u0 * v1) + (v0 * u2) + (u1 * v2) - (v1 * u2) - (v0 * u1) - (u0 * v2);\n        const deltaA = (x0 * v1) + (v0 * x2) + (x1 * v2) - (v1 * x2) - (v0 * x1) - (x0 * v2);\n        const deltaB = (u0 * x1) + (x0 * u2) + (u1 * x2) - (x1 * u2) - (x0 * u1) - (u0 * x2);\n        const deltaC = (u0 * v1 * x2) + (v0 * x1 * u2) + (x0 * u1 * v2) - (x0 * v1 * u2) - (v0 * u1 * x2) - (u0 * x1 * v2);\n        const deltaD = (y0 * v1) + (v0 * y2) + (y1 * v2) - (v1 * y2) - (v0 * y1) - (y0 * v2);\n        const deltaE = (u0 * y1) + (y0 * u2) + (u1 * y2) - (y1 * u2) - (y0 * u1) - (u0 * y2);\n        const deltaF = (u0 * v1 * y2) + (v0 * y1 * u2) + (y0 * u1 * v2) - (y0 * v1 * u2) - (v0 * u1 * y2) - (u0 * y1 * v2);\n\n        context.transform(\n            deltaA / delta,\n            deltaD / delta,\n            deltaB / delta,\n            deltaE / delta,\n            deltaC / delta,\n            deltaF / delta\n        );\n\n        context.drawImage(\n            textureSource,\n            0,\n            0,\n            textureWidth * base.resolution,\n            textureHeight * base.resolution,\n            0,\n            0,\n            textureWidth,\n            textureHeight\n        );\n\n        context.restore();\n        this.renderer.invalidateBlendMode();\n    }\n\n    /**\n     * Renders a flat Mesh\n     *\n     * @private\n     * @param {PIXI.Mesh} mesh - The Mesh to render\n     */\n    renderMeshFlat(mesh)\n    {\n        const context = this.renderer.context;\n        const vertices = mesh.geometry.getBuffer('aVertexPosition').data;\n        const length = vertices.length / 2;\n\n        // this.count++;\n\n        context.beginPath();\n\n        for (let i = 1; i < length - 2; ++i)\n        {\n            // draw some triangles!\n            const index = i * 2;\n\n            const x0 = vertices[index];\n            const y0 = vertices[index + 1];\n\n            const x1 = vertices[index + 2];\n            const y1 = vertices[index + 3];\n\n            const x2 = vertices[index + 4];\n            const y2 = vertices[index + 5];\n\n            context.moveTo(x0, y0);\n            context.lineTo(x1, y1);\n            context.lineTo(x2, y2);\n        }\n\n        context.fillStyle = '#FF0000';\n        context.fill();\n        context.closePath();\n    }\n\n    /**\n     * destroy the the renderer.\n     *\n     */\n    destroy()\n    {\n        this.renderer = null;\n    }\n}\n","import { settings } from '@pixi/settings';\n\n/**\n * Default `canvasPadding` for canvas-based Mesh rendering.\n *\n * @see PIXI.Mesh2d#canvasPadding\n * @static\n * @name MESH_CANVAS_PADDING\n * @memberof PIXI.settings\n * @type {number}\n * @default 0\n */\nsettings.MESH_CANVAS_PADDING = 0;\n\nexport { settings };\n","import { MeshMaterial } from '@pixi/mesh';\n\n/**\n * Renders the mesh using the Canvas renderer\n *\n * @protected\n * @method render\n * @memberof PIXI.MeshMaterial#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer.\n * @param {PIXI.Mesh} mesh - Mesh to render.\n */\nMeshMaterial.prototype._renderCanvas = function _renderCanvas(renderer, mesh)\n{\n    renderer.plugins.mesh.render(mesh);\n};\n","import { canvasUtils } from '@pixi/canvas-renderer';\nimport { NineSlicePlane } from '@pixi/mesh-extras';\n\n/**\n * Cached tint value so we can tell when the tint is changed.\n * @memberof PIXI.NineSlicePlane#\n * @member {number} _cachedTint\n * @protected\n */\nNineSlicePlane.prototype._cachedTint = 0xFFFFFF;\n\n/**\n * Cached tinted texture.\n * @memberof PIXI.NineSlicePlane#\n * @member {HTMLCanvasElement} _tintedCanvas\n * @protected\n */\nNineSlicePlane.prototype._tintedCanvas = null;\n\n/**\n * Temporary storage for canvas source coords\n * @memberof PIXI.NineSlicePlane#\n * @member {number[]} _canvasUvs\n * @private\n */\nNineSlicePlane.prototype._canvasUvs = null;\n\n/**\n * Renders the object using the Canvas renderer\n *\n * @private\n * @method _renderCanvas\n * @memberof PIXI.NineSlicePlane#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer to render with.\n */\nNineSlicePlane.prototype._renderCanvas = function _renderCanvas(renderer)\n{\n    const context = renderer.context;\n    const transform = this.worldTransform;\n    const res = renderer.resolution;\n    const isTinted = this.tint !== 0xFFFFFF;\n    const texture = this.texture;\n\n    // Work out tinting\n    if (isTinted)\n    {\n        if (this._cachedTint !== this.tint)\n        {\n            // Tint has changed, need to update the tinted texture and use that instead\n\n            this._cachedTint = this.tint;\n\n            this._tintedCanvas = canvasUtils.getTintedCanvas(this, this.tint);\n        }\n    }\n\n    const textureSource = !isTinted ? texture.baseTexture.getDrawableSource() : this._tintedCanvas;\n\n    if (!this._canvasUvs)\n    {\n        this._canvasUvs = [0, 0, 0, 0, 0, 0, 0, 0];\n    }\n\n    const vertices = this.vertices;\n    const uvs = this._canvasUvs;\n    const u0 = isTinted ? 0 : texture.frame.x;\n    const v0 = isTinted ? 0 : texture.frame.y;\n    const u1 = u0 + texture.frame.width;\n    const v1 = v0 + texture.frame.height;\n\n    uvs[0] = u0;\n    uvs[1] = u0 + this._leftWidth;\n    uvs[2] = u1 - this._rightWidth;\n    uvs[3] = u1;\n    uvs[4] = v0;\n    uvs[5] = v0 + this._topHeight;\n    uvs[6] = v1 - this._bottomHeight;\n    uvs[7] = v1;\n\n    for (let i = 0; i < 8; i++)\n    {\n        uvs[i] *= texture.baseTexture.resolution;\n    }\n\n    context.globalAlpha = this.worldAlpha;\n    renderer.setBlendMode(this.blendMode);\n\n    if (this.roundPixels)\n    {\n        context.setTransform(\n            transform.a * res,\n            transform.b * res,\n            transform.c * res,\n            transform.d * res,\n            (transform.tx * res) | 0,\n            (transform.ty * res) | 0\n        );\n    }\n    else\n    {\n        context.setTransform(\n            transform.a * res,\n            transform.b * res,\n            transform.c * res,\n            transform.d * res,\n            transform.tx * res,\n            transform.ty * res\n        );\n    }\n\n    for (let row = 0; row < 3; row++)\n    {\n        for (let col = 0; col < 3; col++)\n        {\n            const ind = (col * 2) + (row * 8);\n            const sw = Math.max(1, uvs[col + 1] - uvs[col]);\n            const sh = Math.max(1, uvs[row + 5] - uvs[row + 4]);\n            const dw = Math.max(1, vertices[ind + 10] - vertices[ind]);\n            const dh = Math.max(1, vertices[ind + 11] - vertices[ind + 1]);\n\n            context.drawImage(textureSource, uvs[col], uvs[row + 4], sw, sh,\n                vertices[ind], vertices[ind + 1], dw, dh);\n        }\n    }\n};\n","import { Mesh } from '@pixi/mesh';\nimport { settings } from './settings';\n\n/**\n * Renders the object using the Canvas renderer\n *\n * @private\n * @method _renderCanvas\n * @memberof PIXI.Mesh#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer.\n */\nMesh.prototype._renderCanvas = function _renderCanvas(renderer)\n{\n    if (this.shader.uvMatrix)\n    {\n        this.shader.uvMatrix.update();\n        this.calculateUvs();\n    }\n\n    this.material._renderCanvas(renderer, this);\n};\n\n// IMPORTANT: Please do NOT use this as a precedent to use `settings` after the object is created\n// this was merely created to completely decouple canvas from the base Mesh class and we are\n// unable to add `canvasPadding` in the constructor anymore, as the case was for PixiJS v4.\n\n/**\n * Internal variable for `canvasPadding`.\n *\n * @private\n * @memberof PIXI.Mesh\n * @member {number}\n * @default null\n */\nMesh.prototype._canvasPadding = null;\n\n/**\n * Triangles in canvas mode are automatically antialiased, use this value to force triangles\n * to overlap a bit with each other. To set the global default, set {@link PIXI.settings.MESH_CANVAS_PADDING}\n *\n * @see PIXI.settings.MESH_CANVAS_PADDING\n * @member {number} canvasPadding\n * @memberof PIXI.SimpleMesh#\n * @default 0\n */\nObject.defineProperty(Mesh.prototype, 'canvasPadding', {\n    get()\n    {\n        return this._canvasPadding !== null ? this._canvasPadding : settings.MESH_CANVAS_PADDING;\n    },\n    set(value)\n    {\n        this._canvasPadding = value;\n    },\n});\n","import { SimpleMesh } from '@pixi/mesh-extras';\n\n/**\n * Renders the object using the Canvas renderer\n *\n * @private\n * @method _renderCanvas\n * @memberof PIXI.Mesh#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer.\n */\nSimpleMesh.prototype._renderCanvas = function _renderCanvas(renderer)\n{\n    if (this.autoUpdate)\n    {\n        this.geometry.getBuffer('aVertexPosition').update();\n    }\n\n    if (this.shader.update)\n    {\n        this.shader.update();\n    }\n\n    this.calculateUvs();\n\n    this.material._renderCanvas(renderer, this);\n};\n","import { SimpleRope } from '@pixi/mesh-extras';\n\n/**\n * Renders the object using the Canvas renderer\n *\n * @protected\n * @method _renderCanvas\n * @memberof PIXI.Mesh#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer.\n */\nSimpleRope.prototype._renderCanvas = function _renderCanvas(renderer)\n{\n    if (this.autoUpdate\n        || this.geometry.width !== this.shader.texture.height)\n    {\n        this.geometry.width = this.shader.texture.height;\n        this.geometry.update();\n    }\n\n    if (this.shader.update)\n    {\n        this.shader.update();\n    }\n\n    this.calculateUvs();\n\n    this.material._renderCanvas(renderer, this);\n};\n"],"names":["CanvasMeshRenderer","renderer","this","render","mesh","const","context","transform","worldTransform","res","resolution","roundPixels","setTransform","a","b","c","d","tx","ty","globalAlpha","worldAlpha","setBlendMode","blendMode","drawMode","DRAW_MODES","TRIANGLES","_renderTriangleMesh","_renderTriangles","length","geometry","buffers","data","i","index","_renderDrawTriangle","indices","getIndex","index0","index1","index2","vertices","texture","valid","base","baseTexture","textureSource","getDrawableSource","textureWidth","width","textureHeight","height","u0","uvs","u1","u2","v0","v1","v2","x0","x1","x2","y0","y1","y2","canvasPadding","paddingX","Math","abs","paddingY","centerX","centerY","normX","normY","dist","sqrt","save","beginPath","moveTo","lineTo","closePath","clip","delta","deltaA","deltaB","deltaC","deltaD","deltaE","deltaF","drawImage","restore","invalidateBlendMode","renderMeshFlat","getBuffer","let","fillStyle","fill","destroy","MESH_CANVAS_PADDING","prototype","_renderCanvas","plugins","_cachedTint","_tintedCanvas","_canvasUvs","isTinted","tint","canvasUtils","getTintedCanvas","frame","x","y","_leftWidth","_rightWidth","_topHeight","_bottomHeight","row","col","ind","sw","max","sh","dw","dh","shader","uvMatrix","update","calculateUvs","material","_canvasPadding","Object","defineProperty","Mesh","get","settings","set","value","autoUpdate"],"mappings":"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"}