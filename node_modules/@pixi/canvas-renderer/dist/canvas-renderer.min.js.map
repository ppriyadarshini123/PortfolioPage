{"version":3,"file":"canvas-renderer.min.js","sources":["../src/utils/CanvasMaskManager.js","../src/utils/canUseNewCanvasBlendModes.js","../src/CanvasRenderer.js","../src/utils/mapCanvasBlendModesToPixi.js","../src/canvasUtils.js","../src/Renderer.js","../src/BaseTexture.js"],"sourcesContent":["import { SHAPES } from '@pixi/math';\n\n/**\n * A set of functions used to handle masking.\n *\n * Sprite masking is not supported on the CanvasRenderer.\n *\n * @class\n * @memberof PIXI\n */\nexport class CanvasMaskManager\n{\n    /**\n     * @param {PIXI.CanvasRenderer} renderer - The canvas renderer.\n     */\n    constructor(renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * This method adds it to the current stack of masks.\n     *\n     * @param {PIXI.MaskData | PIXI.Graphics} maskData - the maskData that will be pushed\n     */\n    pushMask(maskData)\n    {\n        const renderer = this.renderer;\n        const maskObject = maskData.isMaskData ? maskData.maskObject : maskData;\n\n        renderer.context.save();\n\n        const cacheAlpha = maskObject.alpha;\n        const transform = maskObject.transform.worldTransform;\n        const resolution = renderer.resolution;\n\n        renderer.context.setTransform(\n            transform.a * resolution,\n            transform.b * resolution,\n            transform.c * resolution,\n            transform.d * resolution,\n            transform.tx * resolution,\n            transform.ty * resolution\n        );\n\n        // TODO support sprite alpha masks??\n        // lots of effort required. If demand is great enough..\n        if (!maskObject._texture)\n        {\n            this.renderGraphicsShape(maskObject);\n            renderer.context.clip();\n        }\n\n        maskData.worldAlpha = cacheAlpha;\n    }\n\n    /**\n     * Renders a PIXI.Graphics shape.\n     *\n     * @param {PIXI.Graphics} graphics - The object to render.\n     */\n    renderGraphicsShape(graphics)\n    {\n        const context = this.renderer.context;\n        const graphicsData = graphics.geometry.graphicsData;\n        const len = graphicsData.length;\n\n        if (len === 0)\n        {\n            return;\n        }\n\n        context.beginPath();\n\n        for (let i = 0; i < len; i++)\n        {\n            const data = graphicsData[i];\n            const shape = data.shape;\n\n            if (data.type === SHAPES.POLY)\n            {\n                const points = shape.points;\n\n                context.moveTo(points[0], points[1]);\n\n                for (let j = 1; j < points.length / 2; j++)\n                {\n                    context.lineTo(points[j * 2], points[(j * 2) + 1]);\n                }\n\n                // if the first and last point are the same close the path - much neater :)\n                if (points[0] === points[points.length - 2] && points[1] === points[points.length - 1])\n                {\n                    context.closePath();\n                }\n            }\n            else if (data.type === SHAPES.RECT)\n            {\n                context.rect(shape.x, shape.y, shape.width, shape.height);\n                context.closePath();\n            }\n            else if (data.type === SHAPES.CIRC)\n            {\n                // TODO - need to be Undefined!\n                context.arc(shape.x, shape.y, shape.radius, 0, 2 * Math.PI);\n                context.closePath();\n            }\n            else if (data.type === SHAPES.ELIP)\n            {\n                // ellipse code taken from: http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas\n\n                const w = shape.width * 2;\n                const h = shape.height * 2;\n\n                const x = shape.x - (w / 2);\n                const y = shape.y - (h / 2);\n\n                const kappa = 0.5522848;\n                const ox = (w / 2) * kappa; // control point offset horizontal\n                const oy = (h / 2) * kappa; // control point offset vertical\n                const xe = x + w; // x-end\n                const ye = y + h; // y-end\n                const xm = x + (w / 2); // x-middle\n                const ym = y + (h / 2); // y-middle\n\n                context.moveTo(x, ym);\n                context.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\n                context.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\n                context.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\n                context.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\n                context.closePath();\n            }\n            else if (data.type === SHAPES.RREC)\n            {\n                const rx = shape.x;\n                const ry = shape.y;\n                const width = shape.width;\n                const height = shape.height;\n                let radius = shape.radius;\n\n                const maxRadius = Math.min(width, height) / 2 | 0;\n\n                radius = radius > maxRadius ? maxRadius : radius;\n\n                context.moveTo(rx, ry + radius);\n                context.lineTo(rx, ry + height - radius);\n                context.quadraticCurveTo(rx, ry + height, rx + radius, ry + height);\n                context.lineTo(rx + width - radius, ry + height);\n                context.quadraticCurveTo(rx + width, ry + height, rx + width, ry + height - radius);\n                context.lineTo(rx + width, ry + radius);\n                context.quadraticCurveTo(rx + width, ry, rx + width - radius, ry);\n                context.lineTo(rx + radius, ry);\n                context.quadraticCurveTo(rx, ry, rx, ry + radius);\n                context.closePath();\n            }\n        }\n    }\n\n    /**\n     * Restores the current drawing context to the state it was before the mask was applied.\n     *\n     * @param {PIXI.CanvasRenderer} renderer - The renderer context to use.\n     */\n    popMask(renderer)\n    {\n        renderer.context.restore();\n        renderer.invalidateBlendMode();\n    }\n\n    /**\n     * Destroys this canvas mask manager.\n     *\n     */\n    destroy()\n    {\n        /* empty */\n    }\n}\n","/**\n * Creates a little colored canvas\n *\n * @ignore\n * @param {string} color - The color to make the canvas\n * @return {canvas} a small canvas element\n */\nfunction createColoredCanvas(color)\n{\n    const canvas = document.createElement('canvas');\n\n    canvas.width = 6;\n    canvas.height = 1;\n\n    const context = canvas.getContext('2d');\n\n    context.fillStyle = color;\n    context.fillRect(0, 0, 6, 1);\n\n    return canvas;\n}\n\n/**\n * Checks whether the Canvas BlendModes are supported by the current browser\n *\n * @private\n * @return {boolean} whether they are supported\n */\nexport function canUseNewCanvasBlendModes()\n{\n    if (typeof document === 'undefined')\n    {\n        return false;\n    }\n\n    const magenta = createColoredCanvas('#ff00ff');\n    const yellow = createColoredCanvas('#ffff00');\n\n    const canvas = document.createElement('canvas');\n\n    canvas.width = 6;\n    canvas.height = 1;\n\n    const context = canvas.getContext('2d');\n\n    context.globalCompositeOperation = 'multiply';\n    context.drawImage(magenta, 0, 0);\n    context.drawImage(yellow, 2, 0);\n\n    const imageData = context.getImageData(2, 0, 1, 1);\n\n    if (!imageData)\n    {\n        return false;\n    }\n\n    const data = imageData.data;\n\n    return (data[0] === 255 && data[1] === 0 && data[2] === 0);\n}\n","import { AbstractRenderer, resources } from '@pixi/core';\nimport { CanvasRenderTarget, sayHello } from '@pixi/utils';\nimport { CanvasMaskManager } from './utils/CanvasMaskManager';\nimport { mapCanvasBlendModesToPixi } from './utils/mapCanvasBlendModesToPixi';\nimport { RENDERER_TYPE, SCALE_MODES, BLEND_MODES } from '@pixi/constants';\nimport { settings } from '@pixi/settings';\n\n/**\n * The CanvasRenderer draws the scene and all its content onto a 2d canvas.\n *\n * This renderer should be used for browsers that do not support WebGL.\n * Don't forget to add the CanvasRenderer.view to your DOM or you will not see anything!\n *\n * @class\n * @memberof PIXI\n * @extends PIXI.AbstractRenderer\n */\nexport class CanvasRenderer extends AbstractRenderer\n{\n    /**\n     * @param {object} [options] - The optional renderer parameters\n     * @param {number} [options.width=800] - the width of the screen\n     * @param {number} [options.height=600] - the height of the screen\n     * @param {HTMLCanvasElement} [options.view] - the canvas to use as a view, optional\n     * @param {boolean} [options.transparent=false] - If the render view is transparent, default false\n     * @param {boolean} [options.autoDensity=false] - Resizes renderer view in CSS pixels to allow for\n     *   resolutions other than 1\n     * @param {boolean} [options.antialias=false] - sets antialias\n     * @param {number} [options.resolution=1] - The resolution / device pixel ratio of the renderer. The\n     *  resolution of the renderer retina would be 2.\n     * @param {boolean} [options.preserveDrawingBuffer=false] - enables drawing buffer preservation,\n     *  enable this if you need to call toDataUrl on the webgl context.\n     * @param {boolean} [options.clearBeforeRender=true] - This sets if the renderer will clear the canvas or\n     *      not before the new render pass.\n     * @param {number} [options.backgroundColor=0x000000] - The background color of the rendered area\n     *  (shown if not transparent).\n     */\n    constructor(options, arg2, arg3)\n    {\n        super('Canvas', options, arg2, arg3);\n\n        this.type = RENDERER_TYPE.CANVAS;\n\n        /**\n         * The root canvas 2d context that everything is drawn with.\n         *\n         * @member {CanvasRenderingContext2D}\n         */\n        this.rootContext = this.view.getContext('2d', { alpha: this.transparent });\n\n        /**\n         * The currently active canvas 2d context (could change with renderTextures)\n         *\n         * @member {CanvasRenderingContext2D}\n         */\n        this.context = this.rootContext;\n\n        /**\n         * Boolean flag controlling canvas refresh.\n         *\n         * @member {boolean}\n         */\n        this.refresh = true;\n\n        /**\n         * Instance of a CanvasMaskManager, handles masking when using the canvas renderer.\n         *\n         * @member {PIXI.CanvasMaskManager}\n         */\n        this.maskManager = new CanvasMaskManager(this);\n\n        /**\n         * The canvas property used to set the canvas smoothing property.\n         *\n         * @member {string}\n         */\n        this.smoothProperty = 'imageSmoothingEnabled';\n\n        if (!this.rootContext.imageSmoothingEnabled)\n        {\n            if (this.rootContext.webkitImageSmoothingEnabled)\n            {\n                this.smoothProperty = 'webkitImageSmoothingEnabled';\n            }\n            else if (this.rootContext.mozImageSmoothingEnabled)\n            {\n                this.smoothProperty = 'mozImageSmoothingEnabled';\n            }\n            else if (this.rootContext.oImageSmoothingEnabled)\n            {\n                this.smoothProperty = 'oImageSmoothingEnabled';\n            }\n            else if (this.rootContext.msImageSmoothingEnabled)\n            {\n                this.smoothProperty = 'msImageSmoothingEnabled';\n            }\n        }\n\n        this.initPlugins(CanvasRenderer.__plugins);\n\n        /**\n         * Tracks the blend modes useful for this renderer.\n         *\n         * @member {object<number, string>}\n         */\n        this.blendModes = mapCanvasBlendModesToPixi();\n        this._activeBlendMode = null;\n        this._outerBlend = false;\n\n        this.renderingToScreen = false;\n\n        sayHello('Canvas');\n\n        /**\n         * Fired after rendering finishes.\n         *\n         * @event PIXI.CanvasRenderer#postrender\n         */\n\n        /**\n         * Fired before rendering starts.\n         *\n         * @event PIXI.CanvasRenderer#prerender\n         */\n\n        this.resize(this.options.width, this.options.height);\n    }\n\n    /**\n     * Renders the object to this canvas view\n     *\n     * @param {PIXI.DisplayObject} displayObject - The object to be rendered\n     * @param {PIXI.RenderTexture} [renderTexture] - A render texture to be rendered to.\n     *  If unset, it will render to the root context.\n     * @param {boolean} [clear=false] - Whether to clear the canvas before drawing\n     * @param {PIXI.Matrix} [transform] - A transformation to be applied\n     * @param {boolean} [skipUpdateTransform=false] - Whether to skip the update transform\n     */\n    render(displayObject, renderTexture, clear, transform, skipUpdateTransform)\n    {\n        if (!this.view)\n        {\n            return;\n        }\n\n        // can be handy to know!\n        this.renderingToScreen = !renderTexture;\n\n        this.emit('prerender');\n\n        const rootResolution = this.resolution;\n\n        if (renderTexture)\n        {\n            renderTexture = renderTexture.baseTexture || renderTexture;\n\n            if (!renderTexture._canvasRenderTarget)\n            {\n                renderTexture._canvasRenderTarget = new CanvasRenderTarget(\n                    renderTexture.width,\n                    renderTexture.height,\n                    renderTexture.resolution\n                );\n                renderTexture.resource = new resources.CanvasResource(renderTexture._canvasRenderTarget.canvas);\n                renderTexture.valid = true;\n            }\n\n            this.context = renderTexture._canvasRenderTarget.context;\n            this.resolution = renderTexture._canvasRenderTarget.resolution;\n        }\n        else\n        {\n            this.context = this.rootContext;\n        }\n\n        const context = this.context;\n\n        if (!renderTexture)\n        {\n            this._lastObjectRendered = displayObject;\n        }\n\n        if (!skipUpdateTransform)\n        {\n            // update the scene graph\n            const cacheParent = displayObject.parent;\n            const tempWt = this._tempDisplayObjectParent.transform.worldTransform;\n\n            if (transform)\n            {\n                transform.copyTo(tempWt);\n                // Canvas Renderer doesn't use \"context.translate\"\n                // nor does it store current translation in projectionSystem\n                // we re-calculate all matrices,\n                // its not like CanvasRenderer can survive more than 1000 elements\n                displayObject.transform._parentID = -1;\n            }\n            else\n            {\n                // in this case matrix cache in displayObject works like expected\n                tempWt.identity();\n            }\n\n            displayObject.parent = this._tempDisplayObjectParent;\n\n            displayObject.updateTransform();\n            displayObject.parent = cacheParent;\n            if (transform)\n            {\n                // Clear the matrix cache one more time,\n                // we dont have our computations to affect standard \"transform=null\" case\n                displayObject.transform._parentID = -1;\n            }\n            // displayObject.hitArea = //TODO add a temp hit area\n        }\n\n        context.save();\n        context.setTransform(1, 0, 0, 1, 0, 0);\n        context.globalAlpha = 1;\n        this._activeBlendMode = BLEND_MODES.NORMAL;\n        this._outerBlend = false;\n        context.globalCompositeOperation = this.blendModes[BLEND_MODES.NORMAL];\n\n        if (clear !== undefined ? clear : this.clearBeforeRender)\n        {\n            if (this.renderingToScreen)\n            {\n                if (this.transparent)\n                {\n                    context.clearRect(0, 0, this.width, this.height);\n                }\n                else\n                {\n                    context.fillStyle = this._backgroundColorString;\n                    context.fillRect(0, 0, this.width, this.height);\n                }\n            } // else {\n            // TODO: implement background for CanvasRenderTarget or RenderTexture?\n            // }\n        }\n\n        // TODO RENDER TARGET STUFF HERE..\n        const tempContext = this.context;\n\n        this.context = context;\n        displayObject.renderCanvas(this);\n        this.context = tempContext;\n\n        context.restore();\n\n        this.resolution = rootResolution;\n\n        this.emit('postrender');\n    }\n\n    /**\n     * Clear the canvas of renderer.\n     *\n     * @param {string} [clearColor] - Clear the canvas with this color, except the canvas is transparent.\n     */\n    clear(clearColor)\n    {\n        const context = this.context;\n\n        clearColor = clearColor || this._backgroundColorString;\n\n        if (!this.transparent && clearColor)\n        {\n            context.fillStyle = clearColor;\n            context.fillRect(0, 0, this.width, this.height);\n        }\n        else\n        {\n            context.clearRect(0, 0, this.width, this.height);\n        }\n    }\n\n    /**\n     * Sets the blend mode of the renderer.\n     *\n     * @param {number} blendMode - See {@link PIXI.BLEND_MODES} for valid values.\n     * @param {boolean} [readyForOuterBlend=false] - Some blendModes are dangerous, they affect outer space of sprite.\n     * Pass `true` only if you are ready to use them.\n     */\n    setBlendMode(blendMode, readyForOuterBlend)\n    {\n        const outerBlend = blendMode === BLEND_MODES.SRC_IN\n            || blendMode === BLEND_MODES.SRC_OUT\n            || blendMode === BLEND_MODES.DST_IN\n            || blendMode === BLEND_MODES.DST_ATOP;\n\n        if (!readyForOuterBlend && outerBlend)\n        {\n            blendMode = BLEND_MODES.NORMAL;\n        }\n\n        if (this._activeBlendMode === blendMode)\n        {\n            return;\n        }\n\n        this._activeBlendMode = blendMode;\n        this._outerBlend = outerBlend;\n        this.context.globalCompositeOperation = this.blendModes[blendMode];\n    }\n\n    /**\n     * Removes everything from the renderer and optionally removes the Canvas DOM element.\n     *\n     * @param {boolean} [removeView=false] - Removes the Canvas element from the DOM.\n     */\n    destroy(removeView)\n    {\n        // call the base destroy\n        super.destroy(removeView);\n\n        this.context = null;\n\n        this.refresh = true;\n\n        this.maskManager.destroy();\n        this.maskManager = null;\n\n        this.smoothProperty = null;\n    }\n\n    /**\n     * Resizes the canvas view to the specified width and height.\n     *\n     * @extends PIXI.AbstractRenderer#resize\n     *\n     * @param {number} screenWidth - the new width of the screen\n     * @param {number} screenHeight - the new height of the screen\n     */\n    resize(screenWidth, screenHeight)\n    {\n        super.resize(screenWidth, screenHeight);\n\n        // reset the scale mode.. oddly this seems to be reset when the canvas is resized.\n        // surely a browser bug?? Let PixiJS fix that for you..\n        if (this.smoothProperty)\n        {\n            this.rootContext[this.smoothProperty] = (settings.SCALE_MODE === SCALE_MODES.LINEAR);\n        }\n    }\n\n    /**\n     * Checks if blend mode has changed.\n     */\n    invalidateBlendMode()\n    {\n        this._activeBlendMode = this.blendModes.indexOf(this.context.globalCompositeOperation);\n    }\n\n    /**\n     * Collection of installed plugins. These are included by default in PIXI, but can be excluded\n     * by creating a custom build. Consult the README for more information about creating custom\n     * builds and excluding plugins.\n     * @name PIXI.CanvasRenderer#plugins\n     * @type {object}\n     * @readonly\n     * @property {PIXI.accessibility.AccessibilityManager} accessibility Support tabbing interactive elements.\n     * @property {PIXI.extract.CanvasExtract} extract Extract image data from renderer.\n     * @property {PIXI.interaction.InteractionManager} interaction Handles mouse, touch and pointer events.\n     * @property {PIXI.prepare.CanvasPrepare} prepare Pre-render display objects.\n     */\n\n    /**\n     * Adds a plugin to the renderer.\n     *\n     * @method\n     * @param {string} pluginName - The name of the plugin.\n     * @param {Function} ctor - The constructor function or class for the plugin.\n     */\n    static registerPlugin(pluginName, ctor)\n    {\n        CanvasRenderer.__plugins = CanvasRenderer.__plugins || {};\n        CanvasRenderer.__plugins[pluginName] = ctor;\n    }\n}\n","import { BLEND_MODES } from '@pixi/constants';\nimport { canUseNewCanvasBlendModes } from './canUseNewCanvasBlendModes';\n\n/**\n * Maps blend combinations to Canvas.\n *\n * @memberof PIXI\n * @function mapCanvasBlendModesToPixi\n * @private\n * @param {string[]} [array=[]] - The array to output into.\n * @return {string[]} Mapped modes.\n */\nexport function mapCanvasBlendModesToPixi(array = [])\n{\n    if (canUseNewCanvasBlendModes())\n    {\n        array[BLEND_MODES.NORMAL] = 'source-over';\n        array[BLEND_MODES.ADD] = 'lighter'; // IS THIS OK???\n        array[BLEND_MODES.MULTIPLY] = 'multiply';\n        array[BLEND_MODES.SCREEN] = 'screen';\n        array[BLEND_MODES.OVERLAY] = 'overlay';\n        array[BLEND_MODES.DARKEN] = 'darken';\n        array[BLEND_MODES.LIGHTEN] = 'lighten';\n        array[BLEND_MODES.COLOR_DODGE] = 'color-dodge';\n        array[BLEND_MODES.COLOR_BURN] = 'color-burn';\n        array[BLEND_MODES.HARD_LIGHT] = 'hard-light';\n        array[BLEND_MODES.SOFT_LIGHT] = 'soft-light';\n        array[BLEND_MODES.DIFFERENCE] = 'difference';\n        array[BLEND_MODES.EXCLUSION] = 'exclusion';\n        array[BLEND_MODES.HUE] = 'hue';\n        array[BLEND_MODES.SATURATION] = 'saturate';\n        array[BLEND_MODES.COLOR] = 'color';\n        array[BLEND_MODES.LUMINOSITY] = 'luminosity';\n    }\n    else\n    {\n        // this means that the browser does not support the cool new blend modes in canvas 'cough' ie 'cough'\n        array[BLEND_MODES.NORMAL] = 'source-over';\n        array[BLEND_MODES.ADD] = 'lighter'; // IS THIS OK???\n        array[BLEND_MODES.MULTIPLY] = 'source-over';\n        array[BLEND_MODES.SCREEN] = 'source-over';\n        array[BLEND_MODES.OVERLAY] = 'source-over';\n        array[BLEND_MODES.DARKEN] = 'source-over';\n        array[BLEND_MODES.LIGHTEN] = 'source-over';\n        array[BLEND_MODES.COLOR_DODGE] = 'source-over';\n        array[BLEND_MODES.COLOR_BURN] = 'source-over';\n        array[BLEND_MODES.HARD_LIGHT] = 'source-over';\n        array[BLEND_MODES.SOFT_LIGHT] = 'source-over';\n        array[BLEND_MODES.DIFFERENCE] = 'source-over';\n        array[BLEND_MODES.EXCLUSION] = 'source-over';\n        array[BLEND_MODES.HUE] = 'source-over';\n        array[BLEND_MODES.SATURATION] = 'source-over';\n        array[BLEND_MODES.COLOR] = 'source-over';\n        array[BLEND_MODES.LUMINOSITY] = 'source-over';\n    }\n    // not-premultiplied, only for webgl\n    array[BLEND_MODES.NORMAL_NPM] = array[BLEND_MODES.NORMAL];\n    array[BLEND_MODES.ADD_NPM] = array[BLEND_MODES.ADD];\n    array[BLEND_MODES.SCREEN_NPM] = array[BLEND_MODES.SCREEN];\n\n    // composite operations\n    array[BLEND_MODES.SRC_IN] = 'source-in';\n    array[BLEND_MODES.SRC_OUT] = 'source-out';\n    array[BLEND_MODES.SRC_ATOP] = 'source-atop';\n    array[BLEND_MODES.DST_OVER] = 'destination-over';\n    array[BLEND_MODES.DST_IN] = 'destination-in';\n    array[BLEND_MODES.DST_OUT] = 'destination-out';\n    array[BLEND_MODES.DST_ATOP] = 'destination-atop';\n    array[BLEND_MODES.XOR] = 'xor';\n\n    // SUBTRACT from flash, does not exist in canvas\n    array[BLEND_MODES.SUBTRACT] = 'source-over';\n\n    return array;\n}\n","import { hex2rgb, rgb2hex } from '@pixi/utils';\nimport { canUseNewCanvasBlendModes } from './utils/canUseNewCanvasBlendModes';\n\n/**\n * Utility methods for Sprite/Texture tinting.\n *\n * Tinting with the CanvasRenderer involves creating a new canvas to use as a texture,\n * so be aware of the performance implications.\n *\n * @namespace PIXI.canvasUtils\n * @memberof PIXI\n */\nexport const canvasUtils = {\n    /**\n     * Basically this method just needs a sprite and a color and tints the sprite with the given color.\n     *\n     * @memberof PIXI.canvasUtils\n     * @param {PIXI.Sprite} sprite - the sprite to tint\n     * @param {number} color - the color to use to tint the sprite with\n     * @return {HTMLCanvasElement} The tinted canvas\n     */\n    getTintedCanvas: (sprite, color) =>\n    {\n        const texture = sprite.texture;\n\n        color = canvasUtils.roundColor(color);\n\n        const stringColor = `#${(`00000${(color | 0).toString(16)}`).substr(-6)}`;\n\n        texture.tintCache = texture.tintCache || {};\n\n        const cachedCanvas = texture.tintCache[stringColor];\n\n        let canvas;\n\n        if (cachedCanvas)\n        {\n            if (cachedCanvas.tintId === texture._updateID)\n            {\n                return texture.tintCache[stringColor];\n            }\n\n            canvas = texture.tintCache[stringColor];\n        }\n        else\n        {\n            canvas = canvasUtils.canvas || document.createElement('canvas');\n        }\n\n        canvasUtils.tintMethod(texture, color, canvas);\n\n        canvas.tintId = texture._updateID;\n\n        if (canvasUtils.convertTintToImage)\n        {\n            // is this better?\n            const tintImage = new Image();\n\n            tintImage.src = canvas.toDataURL();\n\n            texture.tintCache[stringColor] = tintImage;\n        }\n        else\n        {\n            texture.tintCache[stringColor] = canvas;\n            // if we are not converting the texture to an image then we need to lose the reference to the canvas\n            canvasUtils.canvas = null;\n        }\n\n        return canvas;\n    },\n\n    /**\n     * Tint a texture using the 'multiply' operation.\n     *\n     * @memberof PIXI.canvasUtils\n     * @param {PIXI.Texture} texture - the texture to tint\n     * @param {number} color - the color to use to tint the sprite with\n     * @param {HTMLCanvasElement} canvas - the current canvas\n     */\n    tintWithMultiply: (texture, color, canvas) =>\n    {\n        const context = canvas.getContext('2d');\n        const crop = texture._frame.clone();\n        const resolution = texture.baseTexture.resolution;\n\n        crop.x *= resolution;\n        crop.y *= resolution;\n        crop.width *= resolution;\n        crop.height *= resolution;\n\n        canvas.width = Math.ceil(crop.width);\n        canvas.height = Math.ceil(crop.height);\n\n        context.save();\n        context.fillStyle = `#${(`00000${(color | 0).toString(16)}`).substr(-6)}`;\n\n        context.fillRect(0, 0, crop.width, crop.height);\n\n        context.globalCompositeOperation = 'multiply';\n\n        const source = texture.baseTexture.getDrawableSource();\n\n        context.drawImage(\n            source,\n            crop.x,\n            crop.y,\n            crop.width,\n            crop.height,\n            0,\n            0,\n            crop.width,\n            crop.height\n        );\n\n        context.globalCompositeOperation = 'destination-atop';\n\n        context.drawImage(\n            source,\n            crop.x,\n            crop.y,\n            crop.width,\n            crop.height,\n            0,\n            0,\n            crop.width,\n            crop.height\n        );\n        context.restore();\n    },\n\n    /**\n     * Tint a texture using the 'overlay' operation.\n     *\n     * @memberof PIXI.canvasUtils\n     * @param {PIXI.Texture} texture - the texture to tint\n     * @param {number} color - the color to use to tint the sprite with\n     * @param {HTMLCanvasElement} canvas - the current canvas\n     */\n    tintWithOverlay(texture, color, canvas)\n    {\n        const context = canvas.getContext('2d');\n        const crop = texture._frame.clone();\n        const resolution = texture.baseTexture.resolution;\n\n        crop.x *= resolution;\n        crop.y *= resolution;\n        crop.width *= resolution;\n        crop.height *= resolution;\n\n        canvas.width = Math.ceil(crop.width);\n        canvas.height = Math.ceil(crop.height);\n\n        context.save();\n        context.globalCompositeOperation = 'copy';\n        context.fillStyle = `#${(`00000${(color | 0).toString(16)}`).substr(-6)}`;\n        context.fillRect(0, 0, crop.width, crop.height);\n\n        context.globalCompositeOperation = 'destination-atop';\n        context.drawImage(\n            texture.baseTexture.getDrawableSource(),\n            crop.x,\n            crop.y,\n            crop.width,\n            crop.height,\n            0,\n            0,\n            crop.width,\n            crop.height\n        );\n\n        // context.globalCompositeOperation = 'copy';\n        context.restore();\n    },\n\n    /**\n     * Tint a texture pixel per pixel.\n     *\n     * @memberof PIXI.canvasUtils\n     * @param {PIXI.Texture} texture - the texture to tint\n     * @param {number} color - the color to use to tint the sprite with\n     * @param {HTMLCanvasElement} canvas - the current canvas\n     */\n    tintWithPerPixel: (texture, color, canvas) =>\n    {\n        const context = canvas.getContext('2d');\n        const crop = texture._frame.clone();\n        const resolution = texture.baseTexture.resolution;\n\n        crop.x *= resolution;\n        crop.y *= resolution;\n        crop.width *= resolution;\n        crop.height *= resolution;\n\n        canvas.width = Math.ceil(crop.width);\n        canvas.height = Math.ceil(crop.height);\n\n        context.save();\n        context.globalCompositeOperation = 'copy';\n        context.drawImage(\n            texture.baseTexture.getDrawableSource(),\n            crop.x,\n            crop.y,\n            crop.width,\n            crop.height,\n            0,\n            0,\n            crop.width,\n            crop.height\n        );\n        context.restore();\n\n        const rgbValues = hex2rgb(color);\n        const r = rgbValues[0];\n        const g = rgbValues[1];\n        const b = rgbValues[2];\n\n        const pixelData = context.getImageData(0, 0, crop.width, crop.height);\n\n        const pixels = pixelData.data;\n\n        for (let i = 0; i < pixels.length; i += 4)\n        {\n            pixels[i + 0] *= r;\n            pixels[i + 1] *= g;\n            pixels[i + 2] *= b;\n        }\n\n        context.putImageData(pixelData, 0, 0);\n    },\n\n    /**\n     * Rounds the specified color according to the canvasUtils.cacheStepsPerColorChannel.\n     *\n     * @memberof PIXI.canvasUtils\n     * @param {number} color - the color to round, should be a hex color\n     * @return {number} The rounded color.\n     */\n    roundColor: (color) =>\n    {\n        const step = canvasUtils.cacheStepsPerColorChannel;\n\n        const rgbValues = hex2rgb(color);\n\n        rgbValues[0] = Math.min(255, (rgbValues[0] / step) * step);\n        rgbValues[1] = Math.min(255, (rgbValues[1] / step) * step);\n        rgbValues[2] = Math.min(255, (rgbValues[2] / step) * step);\n\n        return rgb2hex(rgbValues);\n    },\n\n    /**\n     * Number of steps which will be used as a cap when rounding colors.\n     *\n     * @memberof PIXI.canvasUtils\n     * @type {number}\n     */\n    cacheStepsPerColorChannel: 8,\n\n    /**\n     * Tint cache boolean flag.\n     *\n     * @memberof PIXI.canvasUtils\n     * @type {boolean}\n     */\n    convertTintToImage: false,\n\n    /**\n     * Whether or not the Canvas BlendModes are supported, consequently the ability to tint using the multiply method.\n     *\n     * @memberof PIXI.canvasUtils\n     * @type {boolean}\n     */\n    canUseMultiply: canUseNewCanvasBlendModes(),\n\n    /**\n     * The tinting method that will be used.\n     *\n     * @memberof PIXI.canvasUtils\n     * @type {Function}\n     */\n    tintMethod: () =>\n    { // jslint-disable no-empty-function\n\n    },\n};\n\ncanvasUtils.tintMethod = canvasUtils.canUseMultiply ? canvasUtils.tintWithMultiply : canvasUtils.tintWithPerPixel;\n","import { Renderer } from '@pixi/core';\nimport { CanvasRenderer } from './CanvasRenderer';\n\n// Reference to Renderer.create static function\nconst parentCreate = Renderer.create;\n\n/**\n * Override the Renderer.create to fallback to use CanvasRenderer.\n * Also supports forceCanvas option with Application or autoDetectRenderer.\n * @private\n */\nRenderer.create = function create(options)\n{\n    const forceCanvas = options && options.forceCanvas;\n\n    if (!forceCanvas)\n    {\n        try\n        {\n            return parentCreate(options);\n        }\n        catch (err)\n        {\n            // swallow WebGL-unsupported error\n        }\n    }\n\n    return new CanvasRenderer(options);\n};\n","import { BaseTexture } from '@pixi/core';\n\n/**\n * Get the drawable source, such as HTMLCanvasElement or HTMLImageElement suitable\n * for rendering with CanvasRenderer. Provided by **@pixi/canvas-renderer** package.\n * @method getDrawableSource\n * @memberof PIXI.BaseTexture#\n * @return {PIXI.ICanvasImageSource} Source to render with CanvasRenderer\n */\nBaseTexture.prototype.getDrawableSource = function getDrawableSource()\n{\n    const resource = this.resource;\n\n    return resource ? (resource.bitmap || resource.source) : this.source;\n};\n"],"names":["CanvasMaskManager","renderer","this","createColoredCanvas","color","const","canvas","document","createElement","width","height","context","getContext","fillStyle","fillRect","canUseNewCanvasBlendModes","magenta","yellow","globalCompositeOperation","drawImage","imageData","getImageData","data","pushMask","maskData","maskObject","isMaskData","save","cacheAlpha","alpha","transform","worldTransform","resolution","setTransform","a","b","c","d","tx","ty","_texture","renderGraphicsShape","clip","worldAlpha","graphics","graphicsData","geometry","len","length","beginPath","let","i","shape","type","SHAPES","POLY","points","moveTo","j","lineTo","closePath","RECT","rect","x","y","CIRC","arc","radius","Math","PI","ELIP","w","h","ox","oy","xe","ye","xm","ym","bezierCurveTo","RREC","rx","ry","maxRadius","min","quadraticCurveTo","popMask","restore","invalidateBlendMode","destroy","CanvasRenderer","options","arg2","arg3","array","super","RENDERER_TYPE","CANVAS","rootContext","view","transparent","refresh","maskManager","smoothProperty","imageSmoothingEnabled","webkitImageSmoothingEnabled","mozImageSmoothingEnabled","oImageSmoothingEnabled","msImageSmoothingEnabled","initPlugins","__plugins","blendModes","BLEND_MODES","NORMAL","ADD","MULTIPLY","SCREEN","OVERLAY","DARKEN","LIGHTEN","COLOR_DODGE","COLOR_BURN","HARD_LIGHT","SOFT_LIGHT","DIFFERENCE","EXCLUSION","HUE","SATURATION","COLOR","LUMINOSITY","NORMAL_NPM","ADD_NPM","SCREEN_NPM","SRC_IN","SRC_OUT","SRC_ATOP","DST_OVER","DST_IN","DST_OUT","DST_ATOP","XOR","SUBTRACT","_activeBlendMode","_outerBlend","renderingToScreen","sayHello","resize","render","displayObject","renderTexture","clear","skipUpdateTransform","emit","rootResolution","baseTexture","_canvasRenderTarget","CanvasRenderTarget","resource","resources","CanvasResource","valid","_lastObjectRendered","cacheParent","parent","tempWt","_tempDisplayObjectParent","copyTo","_parentID","identity","updateTransform","globalAlpha","undefined","clearBeforeRender","clearRect","_backgroundColorString","tempContext","renderCanvas","clearColor","setBlendMode","blendMode","readyForOuterBlend","outerBlend","removeView","screenWidth","screenHeight","settings","SCALE_MODE","SCALE_MODES","LINEAR","indexOf","registerPlugin","pluginName","ctor","AbstractRenderer","canvasUtils","getTintedCanvas","sprite","texture","stringColor","roundColor","toString","substr","tintCache","cachedCanvas","tintId","_updateID","tintMethod","convertTintToImage","tintImage","Image","src","toDataURL","tintWithMultiply","crop","_frame","clone","ceil","source","getDrawableSource","tintWithOverlay","tintWithPerPixel","rgbValues","hex2rgb","r","g","pixelData","pixels","putImageData","step","cacheStepsPerColorChannel","rgb2hex","canUseMultiply","parentCreate","Renderer","create","forceCanvas","err","prototype","bitmap"],"mappings":"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"}